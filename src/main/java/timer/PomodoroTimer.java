package timer;

import model.UserSession;
import storage.UserDataService;
import ui.KeyboardFactory;

public class PomodoroTimer {
    private final UserSession session;
    private final UserDataService dataService;

    public PomodoroTimer(UserSession session, UserDataService dataService) {
        this.session = session;
        this.dataService = dataService;
    }

    public void startWork() {
        session.sendMessage("üçÖ –ü–æ–º–∏–¥–æ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–∞–±–æ—Ç–∞–π 25 –º–∏–Ω—É—Ç.", KeyboardFactory.mainMenu());
        TimerThread timer = new TimerThread(session, 25 * 60, () -> {
            dataService.recordWork(session.getUserId());
            session.sendMessage("‚è∞ –í—Ä–µ–º—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å! –ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å.", KeyboardFactory.mainMenu());
            startRest();
        });
        session.setTimer(timer);
    }

    private void startRest() {
        session.sendMessage("‚òï –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤.", KeyboardFactory.mainMenu());
        TimerThread timer = new TimerThread(session, 5 * 60, () -> {
            dataService.recordRest(session.getUserId());
            session.sendMessage("üîî –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É?", KeyboardFactory.mainMenu());
        });
        session.setTimer(timer);
    }
}