package bot;

import model.UserSession;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.objects.Update;
import storage.UserDataService;
import timer.PomodoroTimer;
import ui.KeyboardFactory;

import java.util.HashMap;
import java.util.Map;

public class PomodoroBot extends TelegramLongPollingBot {
    private final Map<Long, UserSession> sessions = new HashMap<>();
    private final UserDataService userDataService;

    public PomodoroBot() {
        this.userDataService = new UserDataService(this); // üëà pass AbsSender to service
    }

    @Override
    public String getBotUsername() {
        return "YourPomodoroBotUsername"; // <- Replace with your bot name
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        var msg = update.getMessage();
        var userId = msg.getFrom().getId();
        var chatId = msg.getChatId();
        var text = msg.getText();

        sessions.putIfAbsent(userId, new UserSession(userId, chatId, this));
        var session = sessions.get(userId);

        switch (text) {
            case "/start" -> session.sendMessage("""
                    üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Pomodoro-–±–æ—Ç.
                    –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

                    ‚ñ∂Ô∏è /start_pomo ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—á–∏–π —Ç–∞–π–º–µ—Ä
                    ‚èπÔ∏è /stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä
                    üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    üèÜ /achievements ‚Äî –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    üìÅ /export_stats ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
                    """, ui.KeyboardFactory.mainMenu()); // ‚úÖ include keyboard
            case "/start_pomo" -> new PomodoroTimer(session, userDataService).startWork();
            case "/stop" -> session.stopTimer();
            case "/stats" -> userDataService.sendStats(chatId);
            case "/achievements" -> userDataService.sendAchievements(chatId);
            case "/export_stats" -> userDataService.exportStats(chatId);
            default -> session.sendMessage("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.");
        }
    }
}