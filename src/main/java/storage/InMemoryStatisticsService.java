package storage;

import service.StatisticsService;

import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

public class InMemoryStatisticsService implements StatisticsService {
    private final Map<Long, Integer> userStats = new HashMap<>();

    @Override
    public void recordPomodoro(long userId) {
        userStats.put(userId, userStats.getOrDefault(userId, 0) + 1);
    }

    @Override
    public String getStats(long userId) {
        int count = userStats.getOrDefault(userId, 0);
        return "üìä –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ " + count + " –ø–æ–º–∏–¥–æ—Ä–æ–∫!";
    }

    @Override
    public String getAchievements(long userId) {
        int count = userStats.getOrDefault(userId, 0);
        if (count >= 10) return "üèÜ –í—ã ‚Äî –º–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!";
        if (count >= 5) return "üéØ –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ!";
        if (count > 0) return "üçÖ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
        return "‚è≥ –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å.";
    }

    @Override
    public byte[] exportStats(long userId) {
        try (ByteArrayOutputStream out = new ByteArrayOutputStream();
             PrintWriter writer = new PrintWriter(out)) {

            writer.println("user_id,sessions_completed");
            writer.println(userId + "," + userStats.getOrDefault(userId, 0));
            writer.flush();
            return out.toByteArray();
        } catch (Exception e) {
            return null;
        }
    }
}